'''
Сделать игру крестики нолики, должно быть несколько уровней сложности, игра с компьютером и игра с человеком.
'''
import tkinter as tk
from tkinter import messagebox
import random

class TicTacToeApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Крестики-нолики")
        self.center_window(450, 450) 
        self.board = [" " for _ in range(9)]
        self.current_player = "X"
        self.game_mode = "PvP"  # PvP or PvC
        self.difficulty = "easy"  # easy or hard
        self.buttons = {}
        self.create_menu()
        self.create_board()

    def center_window(self, width=450, height=450):
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()

        center_x = int(screen_width/2 - width/2)
        center_y = int(screen_height/2 - height/2)
        self.root.geometry(f'{width}x{height}+{center_x}+{center_y}')

    def create_menu(self):
        menu_bar = tk.Menu(self.root)
        game_menu = tk.Menu(menu_bar, tearoff=0)
        game_menu.add_command(label="Новая игра (PvP)", command=lambda: self.start_new_game("PvP"))
        game_menu.add_command(label="Новая игра (Уровень - Легкий)", command=lambda: self.start_new_game("PvC", "easy"))
        game_menu.add_command(label="Новая игра (Уровень - Сложный)", command=lambda: self.start_new_game("PvC", "hard"))
        menu_bar.add_cascade(label="Настройки", menu=game_menu)
        self.root.config(menu=menu_bar)

    def create_board(self):
        for i in range(9):
            button = tk.Button(self.root, text=" ", font="Arial 20",
                               command=lambda i=i: self.on_button_click(i))
            button.grid(row=i // 3, column=i % 3, sticky='nsew')
            self.buttons[i] = button
        for i in range(3):
            self.root.grid_rowconfigure(i, weight=1)
            self.root.grid_columnconfigure(i, weight=1)

    def start_new_game(self, mode, difficulty="easy"):
        self.game_mode = mode
        self.difficulty = difficulty
        self.board = [" " for _ in range(9)]
        self.current_player = "X"
        for button in self.buttons.values():
            button.config(text=" ", state=tk.NORMAL)
        if mode == "PvC" and difficulty == "hard":
            self.current_player = "O"
            self.computer_move()

    def on_button_click(self, i):
        if self.board[i] == " " and not self.check_winner(self.current_player):
            self.board[i] = self.current_player
            self.buttons[i].config(text=self.current_player)
            if self.check_winner(self.current_player):
                messagebox.showinfo("Победа!", f"Игрок {self.current_player} победил!")
                self.end_game()
            elif " " not in self.board:
                messagebox.showinfo("Ничья!", "Игра закончилась вничью!")
                self.end_game()
            else:
                self.toggle_player()
                if self.game_mode == "PvC" and self.current_player == "O":
                    self.computer_move()

    def toggle_player(self):
        self.current_player = "O" if self.current_player == "X" else "X"

    def computer_move(self):
        if self.difficulty == "easy":
            index = self.get_random_move()
        else:
            index = self.get_hard_move()
        self.on_button_click(index)

    def get_random_move(self):
        available_moves = [i for i, spot in enumerate(self.board) if spot == " "]
        return random.choice(available_moves)

    def get_hard_move(self):
        if self.board[4] == " ":
            return 4
        else:
            return self.get_random_move()

    def check_winner(self, player):
        win_conditions = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8],  
            [0, 3, 6], [1, 4, 7], [2, 5, 8],  
            [0, 4, 8], [2, 4, 6]              
        ]
        for condition in win_conditions:
            if all(self.board[i] == player for i in condition):
                return True
        return False

    def end_game(self):
        for button in self.buttons.values():
            button.config(state=tk.DISABLED)

if __name__ == "__main__":
    root = tk.Tk()
    app = TicTacToeApp(root)
    root.mainloop()
