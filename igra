import pygame
import random

# Инициализация Pygame
pygame.init()

# Параметры экрана
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Simple Mario Game")

# Цвета
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
COIN_COLOR = (255, 223, 0)

# Игровые параметры
PLAYER_WIDTH = 40
PLAYER_HEIGHT = 60
PLAYER_SPEED = 5
GRAVITY = 1
JUMP_STRENGTH = 15

COIN_WIDTH = 20
COIN_HEIGHT = 20

OBSTACLE_WIDTH = 60
OBSTACLE_HEIGHT = 20

ENEMY_WIDTH = 40
ENEMY_HEIGHT = 60
ENEMY_SPEED = 2

# Загрузка изображений
mario_image = pygame.image.load('mario.png')
mario_image = pygame.transform.scale(mario_image, (PLAYER_WIDTH, PLAYER_HEIGHT))

enemy_image = pygame.image.load('enemy.png')
enemy_image = pygame.transform.scale(enemy_image, (ENEMY_WIDTH, ENEMY_HEIGHT))

# Игрок
player = pygame.Rect(100, SCREEN_HEIGHT - PLAYER_HEIGHT - 100, PLAYER_WIDTH, PLAYER_HEIGHT)
player_velocity_y = 0
on_ground = False

# Уровни
levels = [
    {
        'coins': [
            pygame.Rect(300, SCREEN_HEIGHT - 150, COIN_WIDTH, COIN_HEIGHT),
            pygame.Rect(600, SCREEN_HEIGHT - 100 - COIN_HEIGHT, COIN_WIDTH, COIN_HEIGHT),
            pygame.Rect(900, SCREEN_HEIGHT - 350, COIN_WIDTH, COIN_HEIGHT),
        ],
        'obstacles': [
            pygame.Rect(200, SCREEN_HEIGHT - 100, OBSTACLE_WIDTH, OBSTACLE_HEIGHT),
            pygame.Rect(500, SCREEN_HEIGHT - 150, OBSTACLE_WIDTH, OBSTACLE_HEIGHT),
            pygame.Rect(800, SCREEN_HEIGHT - 300, OBSTACLE_WIDTH, OBSTACLE_HEIGHT),
        ],
        'enemies': [
            pygame.Rect(400, SCREEN_HEIGHT - ENEMY_HEIGHT - 100, ENEMY_WIDTH, ENEMY_HEIGHT),
            pygame.Rect(700, SCREEN_HEIGHT - ENEMY_HEIGHT - 200, ENEMY_WIDTH, ENEMY_HEIGHT),
        ]
    },
    {
        'coins': [
            pygame.Rect(250, SCREEN_HEIGHT - 150, COIN_WIDTH, COIN_HEIGHT),
            pygame.Rect(550, SCREEN_HEIGHT - 200 - COIN_HEIGHT, COIN_WIDTH, COIN_HEIGHT),
            pygame.Rect(850, SCREEN_HEIGHT - 300, COIN_WIDTH, COIN_HEIGHT),
        ],
        'obstacles': [
            pygame.Rect(300, SCREEN_HEIGHT - 200, OBSTACLE_WIDTH, OBSTACLE_HEIGHT),
            pygame.Rect(600, SCREEN_HEIGHT - 250, OBSTACLE_WIDTH, OBSTACLE_HEIGHT),
            pygame.Rect(900, SCREEN_HEIGHT - 350, OBSTACLE_WIDTH, OBSTACLE_HEIGHT),
        ],
        'enemies': [
            pygame.Rect(350, SCREEN_HEIGHT - ENEMY_HEIGHT - 100, ENEMY_WIDTH, ENEMY_HEIGHT),
            pygame.Rect(650, SCREEN_HEIGHT - ENEMY_HEIGHT - 200, ENEMY_WIDTH, ENEMY_HEIGHT),
            pygame.Rect(950, SCREEN_HEIGHT - ENEMY_HEIGHT - 300, ENEMY_WIDTH, ENEMY_HEIGHT),
        ]
    },
    {
        'coins': [
            pygame.Rect(200, SCREEN_HEIGHT - 150, COIN_WIDTH, COIN_HEIGHT),
            pygame.Rect(500, SCREEN_HEIGHT - 100 - COIN_HEIGHT, COIN_WIDTH, COIN_HEIGHT),
            pygame.Rect(800, SCREEN_HEIGHT - 250, COIN_WIDTH, COIN_HEIGHT),
        ],
        'obstacles': [
            pygame.Rect(250, SCREEN_HEIGHT - 150, OBSTACLE_WIDTH, OBSTACLE_HEIGHT),
            pygame.Rect(550, SCREEN_HEIGHT - 200, OBSTACLE_WIDTH, OBSTACLE_HEIGHT),
            pygame.Rect(850, SCREEN_HEIGHT - 300, OBSTACLE_WIDTH, OBSTACLE_HEIGHT),
        ],
        'enemies': [
            pygame.Rect(300, SCREEN_HEIGHT - ENEMY_HEIGHT - 100, ENEMY_WIDTH, ENEMY_HEIGHT),
            pygame.Rect(600, SCREEN_HEIGHT - ENEMY_HEIGHT - 200, ENEMY_WIDTH, ENEMY_HEIGHT),
            pygame.Rect(900, SCREEN_HEIGHT - ENEMY_HEIGHT - 300, ENEMY_WIDTH, ENEMY_HEIGHT),
            pygame.Rect(1200, SCREEN_HEIGHT - ENEMY_HEIGHT - 400, ENEMY_WIDTH, ENEMY_HEIGHT),
        ]
    }
]

current_level = 0

# Счетчик монет
score = 0
font = pygame.font.SysFont(None, 36)


# Функция перезапуска игры
def reset_game():
    global player, player_velocity_y, on_ground, score, current_level
    player = pygame.Rect(100, SCREEN_HEIGHT - PLAYER_HEIGHT - 100, PLAYER_WIDTH, PLAYER_HEIGHT)
    player_velocity_y = 0
    on_ground = False
    score = 0
    current_level = 0


# Функция перехода на следующий уровень
def next_level():
    global player, player_velocity_y, on_ground, current_level
    current_level += 1
    if current_level >= len(levels):
        current_level = 0  # Если уровни закончились, начинаем сначала
    player = pygame.Rect(100, SCREEN_HEIGHT - PLAYER_HEIGHT - 100, PLAYER_WIDTH, PLAYER_HEIGHT)
    player_velocity_y = 0
    on_ground = False


# Главный цикл игры
running = True
game_over = False
clock = pygame.time.Clock()

while running:
    screen.fill(WHITE)

    # Обработка событий
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN and game_over:
            if event.key == pygame.K_r:
                game_over = False
                reset_game()

    if not game_over:
        # Движение игрока
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT]:
            player.x -= PLAYER_SPEED
        if keys[pygame.K_RIGHT]:
            player.x += PLAYER_SPEED
        if keys[pygame.K_SPACE] and on_ground:
            player_velocity_y = -JUMP_STRENGTH
            on_ground = False

        # Гравитация
        player_velocity_y += GRAVITY
        player.y += player_velocity_y

        # Проверка на землю и препятствия
        if player.y + PLAYER_HEIGHT >= SCREEN_HEIGHT:
            player.y = SCREEN_HEIGHT - PLAYER_HEIGHT
            player_velocity_y = 0
            on_ground = True

        for obstacle in levels[current_level]['obstacles']:
            if player.colliderect(obstacle) and player_velocity_y > 0:
                player.y = obstacle.y - PLAYER_HEIGHT
                player_velocity_y = 0
                on_ground = True

        # Проверка на столкновение с монетами
        for coin in levels[current_level]['coins'][:]:
            if player.colliderect(coin):
                levels[current_level]['coins'].remove(coin)
                score += 1

        # Движение врагов
        for enemy in levels[current_level]['enemies']:
            enemy.x += random.choice([-ENEMY_SPEED, ENEMY_SPEED])
            enemy.y += random.choice([-ENEMY_SPEED, ENEMY_SPEED])
            enemy.x = max(0, min(SCREEN_WIDTH - ENEMY_WIDTH, enemy.x))
            enemy.y = max(0, min(SCREEN_HEIGHT - ENEMY_HEIGHT, enemy.y))

        # Проверка на столкновение с врагами
        for enemy in levels[current_level]['enemies'][:]:
            if player.colliderect(enemy):
                if player_velocity_y > 0 and player.bottom >= enemy.top + 10:
                    levels[current_level]['enemies'].remove(enemy)
                    player_velocity_y = -JUMP_STRENGTH // 2  # Прыжок от врага
                else:
                    game_over = True

        # Проверка на переход на следующий уровень
        if not levels[current_level]['coins']:
            next_level()

        # Отрисовка игрока, монет, препятствий и врагов
        screen.blit(mario_image, (player.x, player.y))
        for coin in levels[current_level]['coins']:
            pygame.draw.rect(screen, COIN_COLOR, coin)
        for obstacle in levels[current_level]['obstacles']:
            pygame.draw.rect(screen, BLACK, obstacle)
        for enemy in levels[current_level]['enemies']:
            screen.blit(enemy_image, (enemy.x, enemy.y))

        # Отображение счетчика монет и уровня
        score_text = font.render(f'Score: {score}', True, BLACK)
        screen.blit(score_text, (10, 10))
        level_text = font.render(f'Level: {current_level + 1}', True, BLACK)
        screen.blit(level_text, (SCREEN_WIDTH - 100, 10))
    else:
        game_over_text = font.render('Game Over! Press R to Restart', True, BLACK)
        screen.blit(game_over_text, (SCREEN_WIDTH // 2 - 150, SCREEN_HEIGHT // 2 - 20))

    # Обновление экрана
    pygame.display.flip()
    clock.tick(60)

pygame.quit()





