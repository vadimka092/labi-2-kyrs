import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
import random

class CheckersGame:
    def __init__(self, root, mode):
        self.root = root
        self.root.title("Italian Checkers - Giveaway")
        self.mode = mode
        self.board = self.create_board()
        self.canvas = tk.Canvas(root, width=400, height=400)
        self.canvas.pack()
        self.selected_piece = None
        self.turn = 'w'
        self.load_images()
        self.draw_board()
        self.draw_pieces()
        self.canvas.bind("<Button-1>", self.on_click)
        self.bot_active = (self.mode != 'pvp')
        if self.bot_active and self.turn == 'b':
            self.bot_move()

    def load_images(self):
        self.white_piece_img = ImageTk.PhotoImage(Image.open("white.png").resize((40, 40)))
        self.black_piece_img = ImageTk.PhotoImage(Image.open("black.png").resize((40, 40)))
        self.white_king_img = ImageTk.PhotoImage(Image.open("white.png").resize((40, 40)))
        self.black_king_img = ImageTk.PhotoImage(Image.open("black.png").resize((40, 40)))
        self.images = {
            'w': self.white_piece_img,
            'b': self.black_piece_img,
            'W': self.white_king_img,
            'B': self.black_king_img,
        }

    def create_board(self):
        board = [[None for _ in range(8)] for _ in range(8)]
        for row in range(3):
            for col in range(8):
                if (row + col) % 2 == 1:
                    board[row][col] = 'b'
        for row in range(5, 8):
            for col in range(8):
                if (row + col) % 2 == 1:
                    board[row][col] = 'w'
        return board

    def draw_board(self):
        self.canvas.delete("all")
        for row in range(8):
            for col in range(8):
                color = "white" if (row + col) % 2 == 0 else "grey"
                self.canvas.create_rectangle(col * 50, row * 50, col * 50 + 50, row * 50 + 50, fill=color)

    def draw_pieces(self):
        for row in range(8):
            for col in range(8):
                piece = self.board[row][col]
                if piece:
                    x0, y0 = col * 50 + 5, row * 50 + 5
                    self.canvas.create_image(x0, y0, anchor='nw', image=self.images[piece])

    def on_click(self, event):
        col, row = event.x // 50, event.y // 50
        if self.selected_piece:
            self.move_piece(self.selected_piece, (row, col))
            self.selected_piece = None
        else:
            self.selected_piece = (row, col)

    def move_piece(self, from_pos, to_pos):
        from_row, from_col = from_pos
        to_row, to_col = to_pos
        piece = self.board[from_row][from_col]
        if self.validate_move(piece, from_pos, to_pos):
            self.board[to_row][to_col] = self.board[from_row][from_col]
            self.board[from_row][from_col] = None
            self.draw_board()
            self.draw_pieces()
            self.check_promotion(to_row, to_col)
            if self.check_game_over():
                return
            self.switch_turn()

    def validate_move(self, piece, from_pos, to_pos):
        from_row, from_col = from_pos
        to_row, to_col = to_pos
        if self.board[to_row][to_col] is not None:
            return False
        if piece == 'w' and to_row == from_row - 1 and abs(to_col - from_col) == 1:
            return True
        if piece == 'b' and to_row == from_row + 1 and abs(to_col - from_col) == 1:
            return True
        if piece in ['W', 'B']:
            if abs(to_row - from_row) == abs(to_col - from_col):
                return True
        return False

    def check_promotion(self, row, col):
        piece = self.board[row][col]
        if piece == 'w' and row == 0:
            self.board[row][col] = 'W'
        if piece == 'b' and row == 7:
            self.board[row][col] = 'B'

    def switch_turn(self):
        self.turn = 'b' if self.turn == 'w' else 'w'
        if self.bot_active and self.turn == 'b':
            self.bot_move()

    def bot_move(self):
        if self.mode == 'easy_bot':
            self.easy_bot_move()
        elif self.mode == 'hard_bot':
            self.hard_bot_move()

    def easy_bot_move(self):
        possible_moves = self.get_all_possible_moves('b')
        if possible_moves:
            move = random.choice(possible_moves)
            self.move_piece(move[0], move[1])

    def hard_bot_move(self):
        possible_moves = self.get_all_possible_moves('b')
        if possible_moves:
            # Implement more advanced logic for hard bot here
            # For simplicity, let's just use the same logic as easy bot for now
            move = random.choice(possible_moves)
            self.move_piece(move[0], move[1])

    def get_all_possible_moves(self, color):
        moves = []
        for row in range(8):
            for col in range(8):
                if self.board[row][col] and self.board[row][col].lower() == color:
                    for dr in [-1, 1]:
                        for dc in [-1, 1]:
                            new_row, new_col = row + dr, col + dc
                            if 0 <= new_row < 8 and 0 <= new_col < 8:
                                if self.validate_move(self.board[row][col], (row, col), (new_row, new_col)):
                                    moves.append(((row, col), (new_row, new_col)))
        return moves

    def check_game_over(self):
        white_pieces = sum(row.count('w') + row.count('W') for row in self.board)
        black_pieces = sum(row.count('b') + row.count('B') for row in self.board)
        if white_pieces == 0:
            self.end_game("Черные победили!")
            return True
        if black_pieces == 0:
            self.end_game("Белые победили!")
            return True
        if not self.get_all_possible_moves('w'):
            self.end_game("Черные победили!")
            return True
        if not self.get_all_possible_moves('b'):
            self.end_game("Белые победили!")
            return True
        return False

    def end_game(self, message):
        messagebox.showinfo("Game Over", message)
        self.root.quit()

def start_game(mode):
    game_root = tk.Toplevel()
    game = CheckersGame(game_root, mode)
    game_root.mainloop()

if __name__ == "__main__":
    root = tk.Tk()
    root.title("Select Game Mode")

    tk.Label(root, text="Выбор режима:").pack()

    tk.Button(root, text="Легкий уровень", command=lambda: start_game('easy_bot')).pack()
    tk.Button(root, text="Сложный уровень", command=lambda: start_game('hard_bot')).pack()
    tk.Button(root, text="PvP", command=lambda: start_game('pvp')).pack()

    root.mainloop()

