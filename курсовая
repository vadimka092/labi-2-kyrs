import tkinter as tk
from PIL import Image, ImageTk
import random

class CheckersGame:
    def __init__(self, root):
        self.root = root
        self.root.title("Italian Checkers - Giveaway")

        self.white_piece_image = Image.open("white.png").resize((40, 40), Image.Resampling.LANCZOS)
        self.white_piece_photo = ImageTk.PhotoImage(self.white_piece_image)

        self.black_piece_image = Image.open("black.png").resize((40, 40), Image.Resampling.LANCZOS)
        self.black_piece_photo = ImageTk.PhotoImage(self.black_piece_image)

        self.white_king_image = Image.open("white.png").resize((40, 40), Image.Resampling.LANCZOS)
        self.white_king_photo = ImageTk.PhotoImage(self.white_king_image)

        self.black_king_image = Image.open("black.png").resize((40, 40), Image.Resampling.LANCZOS)
        self.black_king_photo = ImageTk.PhotoImage(self.black_king_image)

        self.cell_size = 50
        self.canvas = tk.Canvas(self.root, width=8 * self.cell_size, height=8 * self.cell_size)
        self.canvas.pack()

        self.draw_board()

        self.board = [
            [None, 'b', None, 'b', None, 'b', None, 'b'],
            ['b', None, 'b', None, 'b', None, 'b', None],
            [None, 'b', None, 'b', None, 'b', None, 'b'],
            [None, None, None, None, None, None, None, None],
            [None, None, None, None, None, None, None, None],
            ['w', None, 'w', None, 'w', None, 'w', None],
            [None, 'w', None, 'w', None, 'w', None, 'w'],
            ['w', None, 'w', None, 'w', None, 'w', None]
        ]

        self.selected_piece = None
        self.turn = 'w'
        self.mode = None

        self.draw_pieces()

        self.canvas.bind("<Button-1>", self.on_click)

        self.menu()

    def draw_board(self):
        for row in range(8):
            for col in range(8):
                color = "white" if (row + col) % 2 == 0 else "gray"
                self.canvas.create_rectangle(
                    col * self.cell_size, row * self.cell_size,
                    (col + 1) * self.cell_size, (row + 1) * self.cell_size,
                    fill=color
                )

    def draw_pieces(self):
        self.canvas.delete("piece")
        for row in range(8):
            for col in range(8):
                piece = self.board[row][col]
                if piece == 'w':
                    self.canvas.create_image(
                        col * self.cell_size + self.cell_size // 2,
                        row * self.cell_size + self.cell_size // 2,
                        image=self.white_piece_photo,
                        tags="piece"
                    )
                elif piece == 'b':
                    self.canvas.create_image(
                        col * self.cell_size + self.cell_size // 2,
                        row * self.cell_size + self.cell_size // 2,
                        image=self.black_piece_photo,
                        tags="piece"
                    )
                elif piece == 'W':
                    self.canvas.create_image(
                        col * self.cell_size + self.cell_size // 2,
                        row * self.cell_size + self.cell_size // 2,
                        image=self.white_king_photo,
                        tags="piece"
                    )
                elif piece == 'B':
                    self.canvas.create_image(
                        col * self.cell_size + self.cell_size // 2,
                        row * self.cell_size + self.cell_size // 2,
                        image=self.black_king_photo,
                        tags="piece"
                    )

    def on_click(self, event):
        col = event.x // self.cell_size
        row = event.y // self.cell_size
        if self.selected_piece:
            self.move_piece(row, col)
        else:
            self.select_piece(row, col)

    def select_piece(self, row, col):
        piece = self.board[row][col]
        if piece and piece.lower() == self.turn:
            self.selected_piece = (row, col)
            print(f"Selected piece at {row}, {col}")

    def move_piece(self, row, col):
        if self.is_valid_move(self.selected_piece[0], self.selected_piece[1], row, col):
            self.board[row][col] = self.board[self.selected_piece[0]][self.selected_piece[1]]
            self.board[self.selected_piece[0]][self.selected_piece[1]] = None
            self.promote_piece(row, col)
            self.selected_piece = None
            self.turn = 'b' if self.turn == 'w' else 'w'
            self.draw_pieces()
            print(f"Moved piece to {row}, {col}")
            if self.check_winner():
                self.end_game()
            elif self.mode == "easy_bot" and self.turn == 'b':
                self.easy_bot_move()
            elif self.mode == "hard_bot" and self.turn == 'b':
                self.hard_bot_move()
        else:
            print(f"Invalid move to {row}, {col}")
            self.selected_piece = None

    def is_valid_move(self, from_row, from_col, to_row, to_col):
        if to_row < 0 or to_row >= 8 or to_col < 0 or to_col >= 8:
            return False
        if self.board[to_row][to_col] is not None:
            return False
        piece = self.board[from_row][from_col]
        if piece.lower() == 'w':
            if piece == 'w' and to_row == from_row - 1 and abs(to_col - from_col) == 1:
                return True
            if piece == 'w' and to_row == from_row - 2 and abs(to_col - from_col) == 2:
                middle_row, middle_col = (from_row + to_row) // 2, (from_col + to_col) // 2
                if self.board[middle_row][middle_col] in ['b', 'B']:
                    self.board[middle_row][middle_col] = None
                    return True
            if piece == 'W':
                if abs(to_row - from_row) == abs(to_col - from_col):
                    step_row = 1 if to_row > from_row else -1
                    step_col = 1 if to_col > from_col else -1
                    for i in range(1, abs(to_row - from_row)):
                        if self.board[from_row + i * step_row][from_col + i * step_col] is not None:
                            return False
                    return True
        elif piece.lower() == 'b':
            if piece == 'b' and to_row == from_row + 1 and abs(to_col - from_col) == 1:
                return True
            if piece == 'b' and to_row == from_row + 2 and abs(to_col - from_col) == 2:
                middle_row, middle_col = (from_row + to_row) // 2, (from_col + to_col) // 2
                if self.board[middle_row][middle_col] in ['w', 'W']:
                    self.board[middle_row][middle_col] = None
                    return True
            if piece == 'B':
                if abs(to_row - from_row) == abs(to_col - from_col):
                    step_row = 1 if to_row > from_row else -1
                    step_col = 1 if to_col > from_col else -1
                    for i in range(1, abs(to_row - from_row)):
                        if self.board[from_row + i * step_row][from_col + i * step_col] is not None:
                            return False
                    return True
        return False

    def promote_piece(self, row, col):
        piece = self.board[row][col]
        if piece == 'w' and row == 0:
            self.board[row][col] = 'W'
        elif piece == 'b' and row == 7:
            self.board[row][col] = 'B'

    def check_winner(self):
        white_pieces = sum(row.count('w') + row.count('W') for row in self.board)
        black_pieces = sum(row.count('b') + row.count('B') for row in self.board)
        if white_pieces == 0:
            self.winner = 'Black'
            return True
        if black_pieces == 0:
            self.winner = 'White'
            return True
        if not self.has_valid_moves('w'):
            self.winner = 'Black'
            return True
        if not self.has_valid_moves('b'):
            self.winner = 'White'
            return True
        return False

        def has_valid_moves(self, player):
            for row in range(8):
                for col in range(8):
                    if self.board[row][col] == player:
                        if self.can_move(row, col):
                            return True
            return False

        def can_move(self, row, col):
            piece = self.board[row][col]
            if piece == 'w':
                if self.is_valid_move(row, col, row - 1, col - 1):
                    return True
                if self.is_valid_move(row, col, row - 1, col + 1):
                    return True
                if self.is_valid_move(row, col, row - 2, col - 2):
                    return True
                if self.is_valid_move(row, col, row - 2, col + 2):
                    return True
            elif piece == 'b':
                if self.is_valid_move(row, col, row + 1, col - 1):
                    return True
                if self.is_valid_move(row, col, row + 1, col + 1):
                    return True
                if self.is_valid_move(row, col, row + 2, col - 2):
                    return True
                if self.is_valid_move(row, col, row + 2, col + 2):
                    return True
            return False

        def move_piece(self, row, col):
            if self.selected_piece:
                from_row, from_col = self.selected_piece
                if self.is_valid_move(from_row, from_col, row, col):
                    self.board[row][col] = self.board[from_row][from_col]
                    self.board[from_row][from_col] = None
                    self.selected_piece = None
                    self.turn = 'b' if self.turn == 'w' else 'w'
                    self.draw_pieces()
                    print(f"Moved piece to {row}, {col}")

                    if not self.has_valid_moves(self.turn):
                        print(f"No valid moves for {self.turn}. Game over!")
                        self.root.quit()
                else:
                    print(f"Invalid move to {row}, {col}")
                    self.selected_piece = None

        def is_valid_move(self, from_row, from_col, to_row, to_col):
            if to_row < 0 or to_row >= 8 or to_col < 0 or to_col >= 8:
                return False
            if self.board[to_row][to_col] is not None:
                return False
            piece = self.board[from_row][from_col]
            if piece == 'w' and to_row == from_row - 1 and abs(to_col - from_col) == 1:
                return True
            if piece == 'b' and to_row == from_row + 1 and abs(to_col - from_col) == 1:
                return True

            # Проверка на захват
            if piece == 'w' and to_row == from_row - 2 and abs(to_col - from_col) == 2:
                middle_row, middle_col = (from_row + to_row) // 2, (from_col + to_col) // 2
                if self.board[middle_row][middle_col] == 'b':
                    self.board[middle_row][middle_col] = None
                    return True
            if piece == 'b' and to_row == from_row + 2 and abs(to_col - from_col) == 2:
                middle_row, middle_col = (from_row + to_row) // 2, (from_col + to_col) // 2
                if self.board[middle_row][middle_col] == 'w':
                    self.board[middle_row][middle_col] = None
                    return True

            return False

    if __name__ == "__main__":
        root = tk.Tk()
        game = CheckersGame(root)
        root.mainloop()
